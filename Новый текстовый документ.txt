<?php
class DataBase
{
private db_host ="";
private db_user ="";
private db_pass ="";
private db_name ="";

	/*
	*	—одиен€емс€ с бд. –азрешено только одно соединение
	*/
	public function connect() {
		if(!$this->con) {
			$mycon = mysqli_connect($this->db_host, $this->db_user, $this->db_pass);
			if($mycon) {
				$seldb = mysqli_connect_db($this->dbname, $mycon);
				if($seldb) {
					$this->con = true;
					return true;
				} else { //если есть ошибка в mysql_connect_db, то...
					return false;
					}
			} else { //если есть ошибка в mysql_connect, то...
				return false;
				}
		} else { //если есть подключение $con - задано, то...
			return true;
			}
	}


	/*
	* ѕровер€ет переменную соединени€ на существовани€
	* ≈сли соедение установлено (con есть), то закрываем соединение и
	* возвращаем true
	*/
	public function disconnect() {
		if($this->con) {
			if(mysqli_close()) {
				$this->con = false;
				return true; //задает переменной $con=false и возвращает true
			} else {
				return false; //возвращает false, если mysqli_close не прошло
			  }
		}
	}

	private $result = array(); //нужно ли

	/*
	* ѕровер€ет наличие таблицы при выполнении запроса
	*
	*/
	private function tableExists($table) {
		$tablesInDb = mysqli_query('SHOW TABLES FROM '.$this->db_name.' LIKE "'.$table.'"');
		if($tableInDb) {
			if(mysqli_num_rows($tableInDb)==1) {
				return true; // если таблица существует, то вернет true
			} else {
				return false; // если таблицы не существует, то вернет false
			}
		}
	}

	/*
	* ¬ыборка информации из бд
	* “ребуетс€: table (наименование таблицы)
	* ќпционально: rows (требуемые колонки, разделитель зап€та€)
	* 						 where (колонка = значение, передаем строкой)
	*							 order (сортировка, передаем строкой)
	*/
	public function select($table, $rows = '*', $where = null, $order = null) {
		$q = 'SELECT '.$rows.' FROM '.$table;
		if($where != null)
			$q .=' WHERE '.$where;
		if($order !=null)
			$q .= ' ORDER BY '.$order;
		if($this->tableExists($table)) {
			$query = mysqli_query($q);
			if($query) {
				$this->numResults = mysqli_num_rows($query);
				for($i = 0; $i < $this->numResults; $i++) {
					$r = mysqli_fetch_array($query);
					$key = array_keys($r);
					for($x = 0; $x < count($key); $x++) {
								// Sanitizes keys so onlu alphavalues are allowed
								if(!is_int($key[$x])) {
									if(mysqli_num_rows($query) > 1)
											$this->result[$i][$key[$x]] = $r[$key[$x]];
									else if(mysqli_num_rows($query) < 1)
											$this->result = null;
									else
											$this->result[$key[$x]] = $r[$key[$x]];
						} //провер€т
					}
				}
				return true; // если запрос $query был выполнен
			}	else {
					return false; // если запрос $query не был выполнен
				}
		} else {	// если така€ таблица не существует
				return false;
			}
	}

	/*
	* ¬ставл€ем значени€ в таблицу
	* “ребуемые: table (наименование таблицы)
	* 					 values (вставл€ем значени€, передаетс€ массив значений, например,
	* 									 array(3,"Name 4", "this@wasinsert.ed");)
	* ќпционально: rows (название столбцов, куда вставл€ем значени€, передаетс€
	*										строкой, например, 'title,meta,date')
	*
	*/
	public function insert($table, $values, $rows = null) {
		if($this->tableExists($table)) {
			$insert = 'INSERT INTO '.$table;
			if($rows != null) {
				$insert .=' ('.$rows.')';
			}
			for($i=0; $i < count($values); $i++) {
				if(is_string($values[$i]))
					$values[$i] = '"'.$values[$i].'"';
			}
			$values = implode(',', $values);
			$insert .= ' VALUES ('.$values.')';
			$ins = mysqli_query($insert);
			if($ins) {
				return true;
			} else {
				return false;
			}
		}
	}


	public function update($table, $rows, $where, $condition) {
		if($this->tableExists($table)) {
			//Parse the where VALUES/Parse the where values
			// even values (including 0) contain the where rows/even values (including 0) contain the where rows
			// odd values contain the clauses for the row/нечетные значени€ содержат предложени€ дл€ строки
			for($i=0; $i < count($where); $i++) {
				if($i%2 != 0) {
					if(is_string($where[$i])) {
						if(($i+1) != null)
								$where[$i] = '"'.$where[$i].'"AND';
						else 
								$where[$i] = '"'.$where[$i].'"';
					}
				}
			}
			$where = implode($condition, $where);
			$update = 'UPDATE '.$table.' SET ';
			$keys = array_keys($rows);
			for($i=0; $i < count($rows); $i++) {
				if(is_string($rows[$keys[$i]])) {
					$update .= $keys[$i].'="'.$rows[$keys[$i]].'"';
				} else {
					$update .= $keys[$i].'='.$rows[$keys[$i]];
				}
				//Parse to add commas / –азобрать, чтобы добавить зап€тые
				if($i != coun($rows)-1) {
					$update .= ',';
				}
			}
			$update .= ' WHERE '.$where;
			$query = mysqli_query($update);
			if($query) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/*
	* ”дал€ем таблицу или записи удовлетвор€ющие условию
	* “ребуемые: таблица (наименование таблицы)
	* ќпционально: where (условие [column = value]), передаем строкой, например, 'id=4'
	*/
	public function delete($table, $where = null) {
		if($this->tableExists($table)) {
			if($where == null) {
				$delete = 'DELETE '.$table;
			} else {
				$delete = 'DELETE FROM '.$table.' WHERE '.$where;
			}
			$del = mysqli_query($delete);
			if($del) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
}